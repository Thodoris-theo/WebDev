<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patients Table</title>
    <link rel="stylesheet" type="text/css" href="patients.css">
</head>

<body>
    <h1>Patients Table</h1>
    <table id="patients-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>AMKA</th>
                <th>Username</th>
                <th>Email</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Identity Number</th>
            </tr>
        </thead>
        <tbody id="patients-body">
            <!-- Dynamic patient data will be inserted here -->
        </tbody>
    </table>

    <script>
        // Fetch patient data from the backend and populate the table
        fetch('/api/doctor/patients')
            .then(response => response.json())
            .then(data => {
                const patientsBody = document.getElementById('patients-body');
                if (Array.isArray(data)) {
                    data.forEach(patient => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                    <td>${patient.id}</td>
                    <td>${patient.amka}</td>
                    <td><input type="text" value="${patient.username}" disabled></td>
                    <td><input type="text" value="${patient.email}" disabled></td>
                    <td><input type="text" value="${patient.firstName}" disabled></td>
                    <td><input type="text" value="${patient.lastName}" disabled></td>
                    <td>
                        <button onclick="editPatient(this)">Edit</button>
                        <button onclick="showMedicalHistory(this, '${patient.identity_number}')">Medical History</button>
                        <button onclick="savePatient(this, '${patient.identity_number}')" style="display:none;">Save</button>
                        <button onclick="cancelEdit(this)" style="display:none;">Cancel</button>
                    </td>
                `;
                        patientsBody.appendChild(row);
                    });
                } else {
                    console.error('Received data is not an array:', data);
                }
            })
            .catch(error => {
                console.error('Failed to fetch patient data:', error);
            });

        function editPatient(button) {
            const row = button.parentNode.parentNode;
            const inputs = row.querySelectorAll('input');
            inputs.forEach(input => input.disabled = false);
            button.style.display = 'none';
            button.nextElementSibling.style.display = 'none';
            button.nextElementSibling.nextElementSibling.style.display = '';
            button.nextElementSibling.nextElementSibling.nextElementSibling.style.display = '';
        }

        function showMedicalHistory(button, identityNumber) {
            const row = button.parentNode.parentNode;
            if (row.nextElementSibling && row.nextElementSibling.classList.contains('medical-history-row')) {
                row.parentNode.removeChild(row.nextElementSibling);
                return;
            }
            fetch(`/api/doctor/patients/${identityNumber}/medical-history`)
                .then(response => response.json())
                .then(history => {
                    const historyRow = document.createElement('tr');
                    historyRow.className = 'medical-history-row';
                    let historyData = '<td colspan="6"><div>';
                    if (history.length) {
                        history.forEach(record => {
                            historyData += `<p>Record ID: ${record.record_id}, Issues: ${record.detected_health_issues}, Treatment: ${record.treatment}</p>`;
                        });
                    } else {
                        historyData += `<p>No medical history found.</p>`;
                    }
                    historyData += '</div></td>';
                    historyRow.innerHTML = historyData;
                    row.parentNode.insertBefore(historyRow, row.nextSibling);
                })
                .catch(error => console.error('Error fetching medical history:', error));
        }

        function savePatient(button, identityNumber) {
            const row = button.parentNode.parentNode;
            const inputs = row.querySelectorAll('input');
            const data = {
                username: inputs[0].value,
                email: inputs[1].value,
                firstName: inputs[2].value,
                lastName: inputs[3].value
            };
            fetch(`/api/doctor/patients/update/${identityNumber}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) throw new Error('Failed to save patient');
                    return response.json();
                })
                .then(() => alert('Update successful!'))
                .catch(error => {
                    console.error('Error saving patient:', error);
                    alert('Error saving patient.');
                })
                .finally(() => {
                    inputs.forEach(input => {
                        input.defaultValue = input.value;
                        input.disabled = true;
                    });
                    button.style.display = 'none';
                    button.nextElementSibling.style.display = 'none';
                    row.querySelector('button[onclick^="editPatient"]').style.display = '';
                });
        }

        function cancelEdit(button) {
            const row = button.parentNode.parentNode;
            const inputs = row.querySelectorAll('input');
            inputs.forEach(input => {
                input.value = input.defaultValue;
                input.disabled = true;
            });
            row.querySelector('button[onclick^="editPatient"]').style.display = '';
            row.querySelector('button[onclick^="showMedicalHistory"]').style.display = '';
            button.style.display = 'none';
            button.previousElementSibling.style.display = 'none';
        }
    </script>

</body>
</html>